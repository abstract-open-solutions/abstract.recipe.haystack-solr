sys.path[0:0] = {{extrapaths}}
from subprocess import Popen
import sys, os
from signal import SIGTERM

if len(sys.argv) != 2:
    print "please run with  %s start|stop|status|fg|reset" % __file__
    sys.exit()

BUILDOUT_DIR = '{{buildoutdir}}'
PID_FILE = '{{pidfile}}'
BASE_DIR = '{{basedir}}'
LOG_DIR = '{{logfile}}'
START_CMD = {{startcmd}}
SCHEMA_FILE = '{{schema_file}}'

def create_schema():
{{if djangosettings_file}}
    import imp, logging
    from django.core.management import setup_environ
    try:
        imp.acquire_lock()
        mod = imp.load_source('_django_settings', '{{django_settings_file}}')
    except Exception, e:
        imp.release_lock()
        sys.stderr.write("Error loading the settings module '%s': %s"
                            % (settings_file, e))
        sys.exit(1)
    imp.release_lock()
    # Setup settings
    setup_environ(mod, '_django_settings')
{{endif}}{{if django_settings}}
    os.environ['DJANGO_SETTINGS_MODULE'] = '{{django_settings}}'
{{endif}}
    from django.core.management import ManagementUtility
    utility = ManagementUtility([
        'manage.py',
        'build_solr_schema',
        '--filename=%s' % SCHEMA_FILE
    ])
    utility.execute()

def update_schema(force=True):
    if os.path.exists(SCHEMA_FILE) and not force:
        return
    print "Creating new schema at %s..." % SCHEMA_FILE
    create_schema()

def start(daemonize=True):
    env = os.environ
    env['BUILDOUT_HOME'] = BUILDOUT_DIR
    logfp = None
    if daemonize:
        logfp = file(LOG_DIR, 'a+')
    update_schema(False)
    pid = Popen(START_CMD, cwd=BASE_DIR, env=env,
                stdout=logfp, stderr=logfp).pid
    if not(daemonize):
        return os.waitpid(pid, 0)
    else:
        f = open(PID_FILE, 'wb')
        f.write(str(pid))
        f.close()
        print 'Process started with pid %s' % (pid,)

def stop():
    try:
        f = open(PID_FILE)
        pid = f.read().strip()
        f.close()
        # SIGHUP here didn't quite do the job, so using TERM instead
        os.kill(int(pid), SIGTERM)
        os.unlink(PID_FILE)
        print "Process stopped successfully."
    except (IOError, OSError):
        print "Error occured: Process probably not stopped ..."

def status():
    try:
        f = open(PID_FILE)
        pid = f.read().strip()
        f.close()
        return pid
    except (IOError, OSError):
        return -1

if sys.argv[1] == 'start':
    start(True)
    sys.exit()
if sys.argv[1] == 'fg':
    start(False)
elif sys.argv[1] == 'stop':
    stop()
elif sys.argv[1] == 'restart':
    if status() > 0:
        stop()
    start(True)
    sys.exit()
elif sys.argv[1] == 'status':
    pid = status()
    if pid > 0:
        print "Process running with PID: ", pid
    else:
        print "Process not running."
elif sys.argv[1] == 'reset':
    update_schema()
else:
    print ("illegal option: please run with "
           "%s start|stop|restart|status|fg|reset" % __file__)
